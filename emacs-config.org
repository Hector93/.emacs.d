#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent

* tema

  #+BEGIN_SRC emacs-lisp
  (load-theme 'tango-dark)
  #+END_SRC

* numero de linea
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode 1) ; always show line numbers
(cua-mode 1)
(defalias 'yes-or-no-p 'y-or-n-p)
(setq visible-bell nil
      ring-bell-function 'flash-mode-line)
(defun flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))
(tool-bar-mode -1) 
(electric-pair-mode 1)
(ido-mode 1)
;; remember cursor position. When file is opened, put cursor at last position
(if (version< emacs-version "25.0")
    (progn
      (require 'saveplace)
      (setq-default save-place t))
  (save-place-mode 1))

;; wrap long lines by word boundary, and arrow up/down move by visual line, etc
(global-visual-line-mode 1)
;; when in a url link, enter key should open it
  (setq org-return-follows-link t)

  ;; make org-mode” syntax color embedded source code
  (setq org-src-fontify-natively t)

#+END_SRC

* completa codigo
Company es usado para completar codigo, tiene varios backends para diferentes lenguajes de programacion.
#+BEGIN_SRC emacs-lisp
(use-package company               
  :ensure t
  :defer t
  :init (global-company-mode)
)
#+END_SRC
** C
irony mode es un backend de company para completar codigo c, lo configuramos y activamos solo en los hooks donde se usa c
para funcionar requiere instalar irony-server el cual depende de llvm y clang
#+BEGIN_SRC emacs-lisp
(use-package irony
  :ensure t
  :config
  (progn
    (use-package company-irony
      :ensure t
      :config
      (add-to-list 'company-backends 'company-irony)
      (add-hook 'irony-mode-hook 'electric-pair-mode)
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
      
      (setq company-idle-delay 0.2)
      (setq company-minimum-prefix-length 2)
      )
)

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package company-irony-c-headers
:ensure t
:config 
(add-to-list
    'company-backends '(company-irony-c-headers company-irony))
)
#+END_SRC
* parentesis
#+BEGIN_SRC emacs-lisp
 (use-package aggressive-indent
   :ensure t
   :config
   (global-aggressive-indent-mode nil))
#+END_SRC

* rtags
rtags debe instalarse en el sistema
#+BEGIN_SRC emacs-lisp
(use-package rtags
:ensure t
:config
(setq rtags-completions-enabled t)
;(define-key c-mode-base-map (kbd "M-.") 'rtags-find-symbol-at-point)
;(define-key c-mode-base-map (kbd "M-,") 'rtags-location-stack-back)
;(define-key c-mode-base-map (kbd "M-?") 'rtags-display-summary)
(rtags-enable-standard-keybindings)
)
#+END_SRC


* company-rtags
  
#+BEGIN_SRC emacs-lisp
(use-package company-rtags
:ensure t
:config
(add-to-list 'company-backends 'company-rtags)
(setq rtags-autostart-diagnostics t)
(rtags-enable-standard-keybindings)
(setq rtags-verify-protocol-version nil)
)
#+END_SRC

* cmake-ide
#+BEGIN_SRC emacs-lisp
(use-package dash
:ensure t)
(use-package cmake-ide
:ensure t
:config
(cmake-ide-setup))

#+END_SRC
* flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

* flycheck rtags
#+BEGIN_SRC emacs-lisp
(use-package flycheck-rtags
:ensure t
  :config
  (progn
    ;; ensure that we use only rtags checking
    ;; https://github.com/Andersbakken/rtags#optional-1
    (defun setup-flycheck-rtags ()
      (flycheck-select-checker 'rtags)
      (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
      (setq-local flycheck-check-syntax-automatically nil)
      (rtags-set-periodic-reparse-timeout 0.9)  ;; Run flycheck 2 seconds after being idle.
      )
    (add-hook 'c-mode-hook #'setup-flycheck-rtags)
    (add-hook 'c++-mode-hook #'setup-flycheck-rtags)
    ))
#+END_SRC

renombrar stm32-emacs a stm32
#+BEGIN_SRC emacs-lisp
(load-file (concat user-emacs-directory "/stm32/stm32.el"))
(require 'stm32)
#+END_SRC
* latex
** colores codigo
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+END_SRC
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
#+END_SRC

** org-cv

#+BEGIN_SRC emacs-lisp
(use-package ox-moderncv
    :load-path "~/Descargas/org-cv/"
    :init (require 'ox-altacv))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Markdown support

(require 'markdown-mode)

(require 'markdown-mode+)

(setq markdown-command "/usr/bin/markdown")

(add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))

(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))

(setq markdown-css-paths `(,(expand-file-name "Documentos/markdown.css")))
#+END_SRC
