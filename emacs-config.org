#+TITLE: Configuraciones de emacs
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent
* personalizacion
En esta seccion se ponen configuraciones propias de emacs
** tema
emacs tiene muchas firmas de configurar temas, ya sean temas externos o propios de emacs
para ver los temas incluidos en emacs ejecuta el comando M-x customize-themes

NOTA: se debe tener consideracion al instalar temas de terceros ya que estos son codigo lisp
y ejecutar codigo arbitrario en un dispositivo tiene riesgos de seguridad
   #+BEGIN_SRC emacs-lisp
   (load-theme 'tango-dark)
   #+END_SRC

** cua mode
 emacs por default no usa los atajos comunes para copiar pegar etc, pero los soporta, para usar
 la configuracion Ctrl-c (copiar), Ctrl-v (pegar) etc se usa el modo cua
 #+BEGIN_SRC emacs-lisp
 (cua-mode 1)
 #+END_SRC
** yes-or-no
 emacs por default pide que se escriba explicitamente yes o no para acciones, se puede cambiar este comportamiento
 sobreescribiendo el alias
 #+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
 #+END_SRC
** desactivar campana
 emacs cada que llega al inicio o final del buffer emite un sonido que no es de mi agrado, por suerte con
 un poco de lisp se puede sobreescribir este comportamiento.
 #+BEGIN_SRC emacs-lisp
   (setq visible-bell nil
	 ring-bell-function 'flash-mode-line)
   (defun flash-mode-line ()
     (invert-face 'mode-line)
     (run-with-timer 0.1 nil #'invert-face 'mode-line))

 #+END_SRC
** tool-bar
  emacs tiene una barra que ayuda a los nuevos usuarios a usarlo de manera mas facil, este modo es
  el tool-bar-mode, una vez que ya se dominan los comandos de emacs esta barra es inecesaria y ocupa espacio que se puede dedicar
  a codigo
  #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1) 
  #+END_SRC

** electric-pair
  los parentesis en emacs por default no se cierran solos, pero la funcionalidad para hacer esto y mas
  ya se encuentran implementadas en el modo electric-pair-mode este tiene varias funcionalidades, la que mas
  me gusta es la capacidad de seleccionar texto y presionar la tecla de abrir parentesis y que encierre el texto
  seleccionado en ellos
  #+BEGIN_SRC emacs-lisp
   (electric-pair-mode 1)
  #+END_SRC

** ido-mode
  cuando se desea abrir un buffer emacs por default pide que se escriba la ruta a mano, el modo ido
  nos presenta una seleccion de archivos y carpetas dentro de la ruta en la que nos encontramos
  #+BEGIN_SRC emacs-lisp
   (ido-mode 1)
  #+END_SRC

** posicion del cursor
  guardar la posicion del cursor al cerrar un archivo y posicionar el cursor en la posicion guardada cuando se abre de nuevo el archivo
   #+BEGIN_SRC emacs-lisp

     ;; recuerda la posicion del cursor. cuando el archivo es reabierto pone el cursor en la posicion guardada
     (if (version< emacs-version "25.0")
	 (progn
	   (require 'saveplace)
	   (setq-default save-place t))
       (save-place-mode 1))

     ;; wrap long lines by word boundary, and arrow up/down move by visual line, etc
     (global-visual-line-mode 1)
     ;; when in a url link, enter key should open it
       (setq org-return-follows-link t)

       ;; make org-mode” syntax color embedded source code
       (setq org-src-fontify-natively t)

   #+END_SRC

* completa codigo
Company es usado para completar codigo, tiene varios backends para diferentes lenguajes de programacion.
#+BEGIN_SRC emacs-lisp
(use-package company               
  :ensure t
  :defer t
  :init (global-company-mode)
)
#+END_SRC
** C
irony mode es un backend de company para completar codigo c, lo configuramos y activamos solo en los hooks donde se usa c
para funcionar requiere instalar irony-server el cual depende de llvm y clang
#+BEGIN_SRC emacs-lisp
(use-package irony
  :ensure t
  :config
  (progn
    (use-package company-irony
      :ensure t
      :config
      (add-to-list 'company-backends 'company-irony)
      (add-hook 'irony-mode-hook 'electric-pair-mode)
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
      
      (setq company-idle-delay 0.2)
      (setq company-minimum-prefix-length 2)
      )
)

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package company-irony-c-headers
:ensure t
:config 
(add-to-list
    'company-backends '(company-irony-c-headers company-irony))
)
#+END_SRC
* identa codigo
por default emacs hace un buen trabajo a la hora de identar codigo, pero esta funcionalidad se puede mejorar
con aggressive-indent este forza todo el tiempo a que el codigo este bien identado
#+BEGIN_SRC emacs-lisp
 (use-package aggressive-indent
   :ensure t
   :config
   (global-aggressive-indent-mode nil))
#+END_SRC

* rtags
rtags es una herramienta que sirve para generar tags del proyecto, estos tags son itilizados por emacs para
encontrar definiciones de variables o funciones, esto es genial cuando se quiere visitar una funcion sin 
saber en que archivo se encuentra
NOTA: rtags debe instalarse en el sistema y no es el unico soportado por emacs, tambien esta gnuglobal
#+BEGIN_SRC emacs-lisp
(use-package rtags
:ensure t
:config
(setq rtags-completions-enabled t)
;(define-key c-mode-base-map (kbd "M-.") 'rtags-find-symbol-at-point)
;(define-key c-mode-base-map (kbd "M-,") 'rtags-location-stack-back)
;(define-key c-mode-base-map (kbd "M-?") 'rtags-display-summary)
(rtags-enable-standard-keybindings)
)
#+END_SRC

* org-bullets
org-bullets es lo que hace que las cabeceras de los archivos org se vean con un icono y no asteriscos
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
:config 
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
)
#+END_SRC

* neo-tree
muestra un arbol de aarchivos, funciona con o sin projectile, pero si estas dentro de un proyecto neo-tree
este te mostrara el arbol de directorios de tu proyecto
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config 
    (global-set-key [f8] 'neotree-toggle)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (setq neo-autorefresh nil)
    (setq neo-create-file-auto-open t)
    (setq neo-window-width 30)
    )
#+END_SRC
* all-the-icons
usado para mostrar iconos utf-8 en emacs, donde mas se pueden ver estos archivos es en neo-tree
pero no esta limitado solo a este
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
:ensure t)
#+END_SRC
* company-rtags
integra el modulo de rtags con el backend de company para que ambos trabajen en conjunto y la experiencia
sea mejor  
#+BEGIN_SRC emacs-lisp
(use-package company-rtags
:ensure t
:config
(add-to-list 'company-backends 'company-rtags)
(setq rtags-autostart-diagnostics t)
(rtags-enable-standard-keybindings)
(setq rtags-verify-protocol-version nil)
)
#+END_SRC

* cmake-ide
añade las funcionalidades de cmake a emacs, esto es muy util por que emacs ahora puede sacar la informacion de un proyecto creado con
cmake
#+BEGIN_SRC emacs-lisp
(use-package dash
:ensure t)
(use-package cmake-ide
:ensure t
:config
(cmake-ide-setup))

#+END_SRC
* flycheck
flycheck es un modulo que se usa para revisar errores y reglas de codigo, el plugin es independiente del lenguaje,
por lo que se tienen que instalar sus dependencias para cada lenguaje
NOTA: cada plugin requiere dependencias externas a emacs como puede ser un compilador o herramientas usadas para el
analisis, para mas informacion: https://www.flycheck.org/en/latest/
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

* flycheck rtags
añade los tags de rtags a flyacheck, con esto flycheck puede analizar mas completamente el proyecto, un ejemplo de esto es
en el caso de c que si no esta definido un #DEFINE sombrea la seccion del codigo para que de manera visual se vea que ese codigo
no se usa
#+BEGIN_SRC emacs-lisp
(use-package flycheck-rtags
:ensure t
  :config
  (progn
    ;; ensure that we use only rtags checking
    ;; https://github.com/Andersbakken/rtags#optional-1
    (defun setup-flycheck-rtags ()
      (flycheck-select-checker 'rtags)
      (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
      (setq-local flycheck-check-syntax-automatically nil)
      (rtags-set-periodic-reparse-timeout 0.9)  ;; Run flycheck 2 seconds after being idle.
      )
    (add-hook 'c-mode-hook #'setup-flycheck-rtags)
    (add-hook 'c++-mode-hook #'setup-flycheck-rtags)
    ))
#+END_SRC

renombrar stm32-emacs a stm32
#+BEGIN_SRC emacs-lisp
(load-file (concat user-emacs-directory "/stm32/stm32.el"))
(require 'stm32)
#+END_SRC
* latex
** colores codigo
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+END_SRC
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
#+END_SRC

* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (add-to-list 'load-path
		 "~/.emacs.d/plugins/yasnippet")
    )
#+END_SRC
yasnippet no incluye las plantillas(snipets) por lo que se tienen que añadir snipets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t
    )
#+END_SRC
* git
** git-gutter
git gutter muestra los cambios en un archivo abierto, muestra lo que se añade, lo que se edita, y lo que se borra
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
:ensure t
:config(global-git-gutter-mode +1))
#+END_SRC

* python
elpy
elpy es ina herramienta que cinfigura emacs para trabajar con python.
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    )
#+END_SRC

elpy no incluye validadores de codigo por lo que se añade a flycheck los validadores de python
#+BEGIN_SRC emacs-lisp
(use-package flycheck-pycheckers
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup))
)
#+END_SRC
* yaml
modo para los archivos yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    )
#+END_SRC
* frontEnd
* typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :config
    (with-eval-after-load 'typescript-mode (add-hook 'typescript-mode-hook #'lsp))
)
#+END_SRC
* angular
#+BEGIN_SRC emacs-lisp
  (use-package ng2-mode
    :ensure t)
#+END_SRC
* javascript
js2 
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t	 
    )
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

;; Better imenu
(add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
#+END_SRC

js2-refactor
#+BEGIN_SRC emacs-lisp
  (use-package js2-refactor
    :ensure t
    :config
    (add-hook 'js2-mode-hook #'js2-refactor-mode)
    (js2r-add-keybindings-with-prefix "C-c C-r")
    (define-key js-mode-map (kbd "M-.") nil)
    (define-key js2-mode-map (kbd "C-k") #'js2r-kill)
    )
#+END_SRC
xref-js2
#+BEGIN_SRC emacs-lisp
  (use-package xref-js2
    :ensure t
    :config
    (add-hook 'js2-mode-hook (lambda ()
			       (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
    )

#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))
#+END_SRC

* dashboard
dashboard reemplaza la ventana por defecto de emacs y pone un historico de archivos recientes y de proyectos,
dashboard para funcionar requiere page-break-lines
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :ensure t
    :config (turn-on-page-break-lines-mode))

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 3)
			    (projects . 5)))
  (setq projectile-switch-project-action 'neotree-projectile-action)
  (setq dashboard-startup-banner 'logo)
)

#+END_SRC
* visual-regexp
vusal-regexp extiene la funcionalidad de replace-regexp con esto el remplazo de expreciones regulares sea mejor
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :ensure t)

(use-package visual-regexp-steroids
:ensure t)
(require 'visual-regexp-steroids)
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)
#+END_SRC
