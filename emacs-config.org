#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent
#+BEGIN_SRC emacs-lisp
(load-file (concat user-emacs-directory "/stm32/stm32.el"))
(require 'stm32)
#+END_SRC
* ajustes
** garbage collector
   In some case the garbage collector will cause performace issues on very large
   files or when using a lot of plugins, this will thell emacs to use more memory
   and as a consecuence the garbage collector will be called less often.

   #+BEGIN_SRC emacs-lisp
   (set 'gc-cons-threshold 100000000)
   #+END_SRC

** line numbers (linum)
   this will display the line number in all the files opened with emacs
   sometimes this causes performance issues so if that's the case only
   enable linue numbers in a specific file or hook.
 #+BEGIN_SRC emacs-lisp
   (global-display-line-numbers-mode 1)
 #+END_SRC

** normal keybindigns
   by default Emacs doesn't use the defacto standard of ctrl-c, ctrl-v, etc
   to edit files emacs uses ctrl-w and ctrl-y but to enable the normal and
   expected operation we can use cua mode to enable the expected behaviour.

   #+BEGIN_SRC emacs-lisp
   (cua-mode 1)
   #+END_SRC

** theme
   Emacs can be customized by hand or we can use the default themesand you can
   even load themes created by another authors, but this is a security risk because
   emacs themes are lisp code and the need to be executed in your local machine,
   that's the main reason why i'm using a built in theme, in this case tango-dark.


   #+BEGIN_SRC emacs-lisp
   (load-theme 'tango-dark)
   #+END_SRC

** change yes-or-no-p to y-or-n-p
   when Emacs asks for permission or to confirm an operation it will require you
   to insert the word yes or no depending on the situation, this is safer because
   it forces the user to read more carefully, but in my case i whant to say yes or
   no with a simple key in this case "y" or "n", to acomplish that we can use the
   built in alias.

   #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** disable toolbar
   by default emacs displays a toolbar to help with basic operations and navigation,
   but once you learn how to use those commands whith the mouse you can disable the
   toolbar to gain some space for your buffers.

   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   #+END_SRC

** close parentesis (Electric pair mode)
   Electric Pair mode, a global minor mode, provides a way to easily insert matching
   delimiters. Whenever you insert an opening delimiter, the matching closing delimiter
   is automatically inserted as well, leaving point between the two.

   #+BEGIN_SRC emacs-lisp
   (electric-pair-mode 1)
   #+END_SRC

** interactive navigation

   When searching files to open the default way of emacs requires the full path and the
   autocomplete is not very nice, by enabling ido mode those autocompletes become more
   easy to handle and an overall speed increase when opening files.

   #+BEGIN_SRC emacs-lisp
   (ido-mode 1)
   #+END_SRC

** remember cursor position
   By default Emacs will always position the cursor at the begining of the file regardless
   if it is a new file or if the file is reopen, but when reopening a file emacs can
   remember where was the last place where the cursor was before leaving the file.

   #+BEGIN_SRC emacs-lisp
   (if (version< emacs-version "25.0")
      (progn
      (require 'saveplace)
      (setq-default save-place t))
      (save-place-mode 1)
      )
   #+END_SRC

** wrap long lines by word

   When a line is to big to be displayed, Emacs can wrap the line to make it fit to the
   available space and when using the arrow keys the navigation will not be line by line, instead
   between the wraped line.

   #+BEGIN_SRC emacs-lisp
   (global-visual-line-mode 1)
   #+END_SRC

** replace ring bell

   By default Emacs will emit a sound when encountering an error or at the end of a file
   this can be anoying to some people, but we can change that to disable the sound and
   flash the mode-line when emacs whants to ring the bell.

   #+BEGIN_SRC emacs-lisp
   (defun flash-mode-line ()
     (invert-face 'mode-line)
     (run-with-timer 0.1 nil #'invert-face 'mode-line)
     )
   (setq visible-bell nil
	ring-bell-function 'flash-mode-line)
   #+END_SRC

** open links in browser

   When emcas encounters a link in a file we can enable the opening the file.

   #+BEGIN_SRC emacs-lisp
   (setq org-return-follows-link t)
   #+END_SRC

** colored org code blocks

   Enable colored org-mode code blocks.

   #+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t)
   #+END_SRC

** Highlight parentheses
   Highlight corresponding parentheses when cursor is on one

   #+BEGIN_SRC emacs-lisp
    (show-paren-mode t)
   #+END_SRC

** Highlight tabulations
   Highlight tabulations when cursor is on one

   #+BEGIN_SRC emacs-lisp
   (setq-default highlight-tabs t)
   #+END_SRC

** trailing white spaces

   #+BEGIN_SRC emacs-lisp
   (setq-default show-trailing-whitespace t)
   #+END_SRC

** withe space at the end of file

   By default Emacs will complain if you save a file without a whitespace at
   the end of it, but we can disable it.

   #+BEGIN_SRC emacs-lisp
   (add-hook 'before-save-hook 'whitespace-cleanup)
   (add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))
   #+END_SRC

** backup files on their own folder
   enacs creates temporal files that contain changes to the file, and that file
   is removed, this can be changed to store all those file to a single directory
   without disabling the functionallity

   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.saves")))
   (setq backup-directory-alist
	  `((".*" . ,"~/.saves")))
   (setq auto-save-file-name-transforms
	  `((".*" ,"~/.saves" t)))
   #+END_SRC
* plugins

** system packages
   use-package can install the dependencies of the emacs plugins
   if configured correctly.

   #+BEGIN_SRC emacs-lisp
     (use-package use-package-ensure-system-package
       :ensure t
       :defer t
     )
     (use-package system-packages
     :ensure t
     :defer t
     )
   #+END_SRC

** git

*** magit

 #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :defer t
     )
 #+END_SRC
** ide like config

*** projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :config
       (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-mode +1))
   #+END_SRC

*** dashboard
     requiere page-break-lines
   #+BEGIN_SRC emacs-lisp
     (use-package page-break-lines
       :ensure t
       )
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
       (use-package dashboard
	 :ensure t
	 :requires page-break-lines
	 :config
	 (dashboard-setup-startup-hook)
	 (setq dashboard-items '((recents  . 3)
				(projects . 5)))
	 ;;(setq projectile-switch-project-action 'neotree-projectile-action)
	 (setq projectile-switch-project-action 'treemacs)
	 (setq dashboard-startup-banner 'logo)
	 (setq dashboard-set-heading-icons t)
	 (setq dashboard-set-file-icons t)
     )

   #+END_SRC
*** regular expresions
   #+BEGIN_SRC emacs-lisp
     (use-package visual-regexp-steroids
       :ensure t
       :defer 2
       :config
       (define-key global-map (kbd "C-c r") 'vr/replace)
       (define-key global-map (kbd "C-c q") 'vr/query-replace)
       )
   #+END_SRC
*** tag navigation
    #+BEGIN_SRC emacs-lisp
      (use-package ggtags
	:ensure t
	:ensure-system-package global
	:config (add-hook 'c-mode-common-hook
			  (lambda ()
			    (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
			      (ggtags-mode 1))))
	)
    #+END_SRC
*** icons
    M-x all-the-icons-install-fonts
    #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
    :ensure t)
    #+END_SRC
*** project tree
    #+BEGIN_SRC emacs-lisp
      (use-package treemacs
	:ensure t
	:defer t
	:init
	(with-eval-after-load 'winum
	  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
	:config
	(progn
	  (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
		treemacs-deferred-git-apply-delay      0.5
		treemacs-directory-name-transformer    #'identity
		treemacs-display-in-side-window        t
		treemacs-eldoc-display                 t
		treemacs-file-event-delay              5000
		treemacs-file-extension-regex          treemacs-last-period-regex-value
		treemacs-file-follow-delay             0.2
		treemacs-file-name-transformer         #'identity
		treemacs-follow-after-init             t
		treemacs-git-command-pipe              ""
		treemacs-goto-tag-strategy             'refetch-index
		treemacs-indentation                   2
		treemacs-indentation-string            " "
		treemacs-is-never-other-window         nil
		treemacs-max-git-entries               5000
		treemacs-missing-project-action        'ask
		treemacs-move-forward-on-expand        nil
		treemacs-no-png-images                 nil
		treemacs-no-delete-other-windows       t
		treemacs-project-follow-cleanup        nil
		treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
		treemacs-position                      'left
		treemacs-read-string-input             'from-child-frame
		treemacs-recenter-distance             0.1
		treemacs-recenter-after-file-follow    nil
		treemacs-recenter-after-tag-follow     nil
		treemacs-recenter-after-project-jump   'always
		treemacs-recenter-after-project-expand 'on-distance
		treemacs-show-cursor                   nil
		treemacs-show-hidden-files             nil
		treemacs-silent-filewatch              nil
		treemacs-silent-refresh                nil
		treemacs-sorting                       'alphabetic-asc
		treemacs-space-between-root-nodes      t
		treemacs-tag-follow-cleanup            t
		treemacs-tag-follow-delay              1.5
		treemacs-user-mode-line-format         nil
		treemacs-user-header-line-format       nil
		treemacs-width                         35
		treemacs-workspace-switch-cleanup      nil)

	  ;; The default width and height of the icons is 22 pixels. If you are
	  ;; using a Hi-DPI display, uncomment this to double the icon size.
	  ;;(treemacs-resize-icons 44)

	  (treemacs-follow-mode t)
	  (treemacs-filewatch-mode t)
	  (treemacs-fringe-indicator-mode 'always)
	  (pcase (cons (not (null (executable-find "git")))
		       (not (null treemacs-python-executable)))
	    (`(t . t)
	     (treemacs-git-mode 'deferred))
	    (`(t . _)
	     (treemacs-git-mode 'simple))))
	:bind
	(:map global-map
	      ("M-0"       . treemacs-select-window)
	      ("C-x t 1"   . treemacs-delete-other-windows)
	      ("C-x t t"   . treemacs)
	      ("C-x t B"   . treemacs-bookmark)
	      ("C-x t C-t" . treemacs-find-file)
	      ("C-x t M-t" . treemacs-find-tag)))

      (use-package treemacs-projectile
      :after (treemacs projectile)
      :ensure t
      :defer t
      )

      (use-package treemacs-magit
      :after (treemacs magit)
      :ensure t
      :defer t
      )

      (use-package treemacs-all-the-icons
      :after (treemacs all-the-icons)
      :ensure t
      :defer t
      :config (treemacs-load-theme "all-the-icons")
      )
    #+END_SRC
*** syntax check

    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
	:ensure t
	:defer t
	:hook (prog-mode . global-flycheck-mode)
	)
    #+END_SRC
*** autocomplete code

    #+BEGIN_SRC emacs-lisp
      (use-package company
	:ensure t
	:defer t
	:init (global-company-mode)
	:custom
	(company-idle-delay 0.2 "delay before trigering completion")
	(company-minimum-prefix-length 0 "number of characters to input before getting a completion")
	:config (add-to-list 'company-backends 'company-irony)

	)
    #+END_SRC
*** lsp
    #+BEGIN_SRC emacs-lisp
      (use-package lsp-mode
	:ensure t
	:init
	;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
	(setq lsp-keymap-prefix "C-c l")
	:hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	       ((c-mode . lsp-deferred)
		(c++-mode . lsp-deferred)
		(python-mode . lsp-deferred)
		)
	       ;; if you want which-key integration
	       (lsp-mode . lsp-enable-which-key-integration))
	:commands (lsp lsp-deferred))

      ;; this presents the documentation of the functions, definitions etc in a pop-up window
      (use-package lsp-ui
	:ensure t
	:commands lsp-ui-mode
	:defer t
	)
      ;; if you are helm user
      ;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
      ;; if you are ivy user
      ;;(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
      (use-package lsp-treemacs
	:ensure t
	:commands lsp-treemacs-errors-list
	:defer t
	)

      ;; optionally if you want to use debugger
      (use-package dap-mode
	:ensure t
	:defer t
	)
      ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

      ;; optional if you want which-key integration
      (use-package which-key
	:ensure t
	:config
	(which-key-mode))

    #+END_SRC

*** cmake-ide
   #+BEGIN_SRC emacs-lisp
     (use-package dash
       :ensure t)
     (use-package cmake-ide
       :ensure t
       :defer t
       :config
       (cmake-ide-setup)
       )

   #+END_SRC
*** yasnippet
       #+BEGIN_SRC emacs-lisp
	 (use-package yasnippet
	   :ensure t
	   :defer t
	   :config
	   (yas-global-mode 1)
	   )

	 (use-package yasnippet-snippets
	   :ensure t
	 ;;  :defer t
	   :config
	   (yas-reload-all)
	   )

   #+END_SRC
* c
flycheck requires cppcheck dependency to work inside c projects

 #+BEGIN_SRC emacs-lisp
   (use-package company-irony
   :ensure t
   :defer t
   :after (company irony)
   ;;:ensure-system-package llvm
   :hook ((irony-mode-hook . electric-pair-mode)
	  (c++-mode-hook . irony-mode)
	  (c-mode-hook . irony-mode)
	  (irony-mode-hook . company-irony-setup-begin-commands)
	  (irony-mode-hook . irony-cdb-autosetup-compile-options)
	  )
   :config
   (add-to-list 'company-backends 'company-irony)
   )
 #+END_SRC
 #+BEGIN_SRC emacs-lisp
   (use-package irony
     :ensure t
     :defer t
   )
 #+END_SRC

 #+BEGIN_SRC emacs-lisp
   (use-package company-irony-c-headers
   :ensure t
   :defer t
   :after (company irony company-irony)
   :config
   (add-to-list
       'company-backends '(company-irony-c-headers company-irony))
   )
 #+END_SRC

* python

this requires the package pyright and npm
 #+BEGIN_SRC emacs-lisp
   (use-package python
     :ensure t
     :config
     ;; Remove guess indent python message
     (setq python-indent-guess-indent-offset-verbose nil)
     ;; Use IPython when available or fall back to regular Python
     ;; (cond
     ;;  ((executable-find "ipython")
     ;;   (progn
     ;;     (setq python-shell-buffer-name "IPython")
     ;;     (setq python-shell-interpreter "ipython")
     ;;     (setq python-shell-interpreter-args "-i --simple-prompt")))
     ;;  ((executable-find "python3")
     ;;   (setq python-shell-interpreter "python3"))
     ;;  ((executable-find "python2")
     ;;   (setq python-shell-interpreter "python2"))
     ;;  (t
     ;;   (setq python-shell-interpreter "python")))
     )

   (use-package lsp-pyright
     :ensure t
     :defer t
     :config
     ;;(setq lsp-clients-python-library-directories '("/usr/" "~/miniconda3/pkgs"))
     (setq lsp-pyright-disable-language-service nil
	   lsp-pyright-disable-organize-imports nil
	   lsp-pyright-auto-import-completions t
	   lsp-pyright-use-library-code-for-types t
	   ;;lsp-pyright-venv-path "~/miniconda3/envs"
	   )
     :hook ((python-mode . (lambda ()
			     (require 'lsp-pyright) (lsp-deferred)))))

 #+END_SRC
